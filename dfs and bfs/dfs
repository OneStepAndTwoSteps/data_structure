#author py chen


from typing import List, Optional, Generator, IO



class Graph:
    """Undirected graph."""

    def __init__(self, num_vertices: int):
        self._num_vertices = num_vertices
        self._adjacency = [[] for _ in range(num_vertices)]

    # 表示路径
    # 最终生成的[[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5, 6], [2, 4, 7], [4, 7], [5, 6]]表示
    # 第一个顶点0指向 1,3 个顶点 顶点1指向0, 2, 4个顶点
    def add_edge(self, s: int, t: int) -> None:
        self._adjacency[s].append(t)
        self._adjacency[t].append(s)
    
    # 输出路径
    def _generate_path(self, s: int, t: int, prev: List[Optional[int]]) -> Generator[str, None, None]:
        # 如果 prev[t]为true或者 s == t  到达终点则不再生成路径。
        if prev[t] or s != t:
            yield from self._generate_path(s, prev[t], prev)
        yield str(t)

    def dfs(self, s: int, t: int) -> IO[str]:
        """Print out a path from Vertex s to Vertex t
        using dfs.
        """
        # 有个比较特殊的变量 found，它的作用是，当我们已经找到终止顶点 t 之后，我们就不再递归地继续查找了 found = True表示找到顶点
        found = False
        #visited 是用来记录已经被访问的顶点，用来避免顶点被重复访问。如果顶点 q 被访问，那相应的 visited[q] 会被设置为 true。
        visited = [False] * self._num_vertices
        # 用来记录搜索路径。当我们从顶点 s 开始，深度优先搜索到顶点 t 后，prev 数组中存储的就是搜索的路径。
        # 不过，这个路径是反向存储的。prev[w] 存储的是，顶点 w 是从哪个前驱顶点遍历过来的。
        # 比如，我们通过顶点 2 的邻接表访问到顶点 3，那 prev[3] 就等于 2。为了正向打印出路径，我们需要递归地来打印，
        # 你可以看下 print() 函数的实现方式。
        prev = [None] * self._num_vertices

        print(self._adjacency)

        def _dfs(from_vertex: int) -> None:
            nonlocal found
            if found: return
            visited[from_vertex] = True
            if from_vertex == t:
                found = True
                return
            for neighbour in self._adjacency[from_vertex]:
                # print("%s first_visited[neighbour]: "%neighbour,visited[neighbour])
                if not visited[neighbour]:
                    # 其中有一個neighbour为3但是沒有记录在路径中，原因是3连接中的self._adjacency元素分别是[1,5]但是这两个顶点已经寻找过了
                    # 所以 prev[1] 和 prev[5] 为True 但是 prev为True时self._generate_path不生成路径
                    print("%s second_visited[neighbour]: " % neighbour, visited[neighbour])
                    prev[neighbour] = from_vertex
                    _dfs(neighbour)

        _dfs(s)
        print("->".join(self._generate_path(s, t, prev)))


if __name__ == "__main__":
    # 这里我们添加了8个顶点
    graph = Graph(8)
    #表示路径
    #最终构造的就是 一个图
    '''
        0-----1-----2
        |     |     |
        3-----4-----5
              |     |
              6-----7
    '''
    #表示第一个顶点0连接第二个顶点1
    graph.add_edge(0, 1)
    #表示第一个顶点0连接第4个顶点3
    graph.add_edge(0, 3)
    #表示第2个顶点1连接第3个顶点2
    graph.add_edge(1, 2)
    graph.add_edge(1, 4)
    graph.add_edge(2, 5)
    graph.add_edge(3, 4)
    graph.add_edge(4, 5)
    graph.add_edge(4, 6)
    graph.add_edge(5, 7)
    graph.add_edge(6, 7)

    graph.dfs(0, 7)
