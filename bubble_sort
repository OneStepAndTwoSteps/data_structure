#算法的稳定性：
#   这个概念是说，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。



# 冒泡排序：
#     特点：
#       1.冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。

#       2.在冒泡排序中，只有交换才可以改变两个元素的前后顺序。为了保证冒泡排序算法的稳定性，当有相邻的两个元素大小相等的时候，
#       我们不做交换，相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。

#       3.最好情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡操作，就可以结束了，所以最好情况时间复杂度是 O(n)。
#       而最坏的情况是，要排序的数据刚好是倒序排列的，我们需要进行 n 次冒泡操作，所以最坏情况时间复杂度为 O(n^2)
import time,random

a=[1,8,4,3,7,5,6,2,9]
#
# print(a[0])
# for index,i in enumerate(a):
#     print(index)
# print(index.values() for index,i in enumerate(a))

def bubble_sort(list1):

    for num,con in enumerate(list1):
        flag = False
        # print(num)
        for index,i in enumerate(list1):
            try:
                if list1[index] >list1[index+1]:
                    # tmp_value=list1[index]
                    # list1[index]=list1[index+1]
                    # list1[index+1]=tmp_value
                    list1[index],list1[index+1]=list1[index+1],list1[index]
                    flag=True
                    print("%s" %(list1))
            except:
                print(index+1)

        if flag == False:
            break

bubble_sort(a)
